{
	"info": {
		"_postman_id": "e918030a-4103-45b8-a265-a20134c99c29",
		"name": "Students Details",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get student details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ceb9d62e-4e42-4060-8ca5-51a809898fb4",
						"exec": [
							"// One way to validate status code",
							"pm.test(\"Verify response to be success i.e. 200\", function () {",
							"    pm.expect(pm.response).to.be.success;",
							"});",
							"",
							"// Another way to validate status code",
							"pm.test(\"Verify response status to be 200\", function () {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"// Yet another way to validate status code (Using the responseCode object)",
							"pm.test(\"Verify response status to equal 200\", function () {",
							"    pm.expect(responseCode.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Validate responseCode name\", function () {",
							"    pm.expect(responseCode.name).to.eql('OK');",
							"});",
							"",
							"console.log(responseCode.detail);",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"global\");",
							"});",
							"",
							"// One way to validate response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);",
							"});",
							"",
							"// Another way to validate response time",
							"pm.test(\"Validate response time\", function () {",
							"    pm.expect(responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Verify birth of birth\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.date_of_birth).to.eql(\"sample string 5\");",
							"});",
							"",
							"pm.test(\"Verify request method\", function () {",
							"    pm.expect(request.method).to.eql(\"GET\");",
							"});",
							"",
							"// responseBody Object",
							"pm.test(\"Verify response data\", function () {",
							"    const jsonData = JSON.parse(responseBody);",
							"    ",
							"    Object.keys(jsonData.data).forEach(key => {",
							"        switch(key){",
							"            case 'date_of_birth':",
							"                pm.expect(jsonData.data[key]).to.eql(\"sample string 5\");",
							"                break;",
							"            case 'first_name':",
							"                pm.expect(jsonData.data[key]).to.eql(\"xxxxxxx\");",
							"                break;",
							"            case 'id':",
							"                pm.expect(jsonData.data[key]).to.eql(60);",
							"                break;",
							"            case 'middle_name':",
							"                pm.expect(jsonData.data[key]).to.eql(\"global\");",
							"                break;",
							"        }",
							"    })",
							"});",
							"",
							"",
							"console.log(JSON.parse(responseBody));",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7d03f230-74ee-41d9-892a-c38fccb756b2",
						"exec": [
							"// Get environment variable",
							"let currentId = pm.environment.get('ID');",
							"",
							"if(currentId !== '60') {",
							"    // Unset or clear environment variable",
							"    pm.environment.unset(\"ID\");",
							"    ",
							"    // Set environment variable",
							"    pm.environment.set('ID', '60')",
							"}",
							"",
							"// Get global variable",
							"let currentUrl = pm.globals.get('url');",
							"",
							"if(currentUrl !== 'http://thetestingworldapi.com') {",
							"    // Unset or clear global variable",
							"    pm.globals.unset('url');",
							"    ",
							"    // Set global variable",
							"    pm.globals.set('url', 'http://thetestingworldapi.com');",
							"}",
							"",
							"// example containing a test ** under the Tests tab only",
							"pm.sendRequest('https://postman-echo.com/get', function (err, res) {",
							"  if (err) { console.log(err); }",
							"  pm.test('response should be okay to process', function () {",
							"    pm.expect(err).to.equal(null);",
							"    pm.expect(res).to.have.property('code', 200);",
							"    pm.expect(res).to.have.property('status', 'OK');",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/studentsDetails/{{ID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add student details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93d2159d-319d-4062-91ae-42e84458b320",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.expect(pm.response).to.have.status(201);",
							"});",
							"",
							"pm.test(\"Your test name\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.first_name).to.eql('jestin');",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"sample\");",
							"});",
							"",
							"pm.test('Verify request data', function(){",
							"\tconsole.log(request.data);",
							"});",
							"",
							"pm.test('Verify request url', function(){",
							"    pm.expect(request.url).to.eql('http://thetestingworldapi.com/api/studentsDetails/');",
							"});",
							"",
							"pm.test('Verify request method', function(){",
							"    pm.expect(request.method).to.eql('POST');",
							"});",
							"",
							"// using the 'request' Object",
							"pm.test('Verify post request body', function(){",
							"    const postRequestBody = JSON.parse(request.data);",
							"    pm.expect(postRequestBody['date_of_birth']).to.eql(\"sample string 5\");",
							"    pm.expect(postRequestBody['first_name']).to.eql(\"jestin\");",
							"    pm.expect(postRequestBody['last_name']).to.eql('sample strisssng 4');",
							"    pm.expect(postRequestBody['middle_name']).to.eql(\"baba\");",
							"});",
							"",
							"",
							"// console.log(JSON.parse(request.data));",
							"// console.log(request.url);",
							"// console.log(request.method);",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"jestin\",\n    \"middle_name\": \"baba\",\n    \"last_name\": \"sample strisssng 4\",\n    \"date_of_birth\": \"sample string 5\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/studentsDetails/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update students details",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "06711ccf-55b3-47c9-b03a-6fcebcaf80bf",
						"exec": [
							"// Get environment variable",
							"let currentId = pm.environment.get('ID');",
							"",
							"if(currentId !== '60') {",
							"    // Unset or clear environment variable",
							"    pm.environment.unset(\"ID\");",
							"    ",
							"    // Set environment variable",
							"    pm.environment.set('ID', '60')",
							"}",
							"",
							"// Get global variable",
							"let currentUrl = pm.globals.get('url');",
							"",
							"if(currentUrl !== 'http://thetestingworldapi.com') {",
							"    // Unset or clear global variable",
							"    pm.globals.unset('url');",
							"    ",
							"    // Set global variable",
							"    pm.globals.set('url', 'http://thetestingworldapi.com');",
							"}",
							"",
							"// example containing a test ** under the Tests tab only",
							"pm.sendRequest('https://postman-echo.com/get', function (err, res) {",
							"  if (err) { console.log(err); }",
							"  pm.test('response should be okay to process', function () {",
							"    pm.expect(err).to.equal(null);",
							"    pm.expect(res).to.have.property('code', 200);",
							"    pm.expect(res).to.have.property('status', 'OK');",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 60,\n    \"first_name\": \"xxxxxxx\",\n    \"middle_name\": \"global\",\n    \"last_name\": \"sample strisssng 4\",\n    \"date_of_birth\": \"sample string 5\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/studentsDetails/{{ID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete students details",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/api/studentsDetails/{{ID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch students details",
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{url}}/api/studentsDetails/{{ID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{ID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "147ce684-28aa-4995-a181-a56de292a63a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0f97272d-4ed5-4922-8be2-b96175c4739c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}